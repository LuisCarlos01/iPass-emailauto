// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  role          String    @default("user")
  avatar        String?
  accessToken   String?
  refreshToken  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  rules         Rule[]
}

model Rule {
  id          String        @id @default(uuid())
  name        String
  description String?
  isActive    Boolean       @default(true)
  priority    Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  conditions  Condition[]
  actions     Action[]
  logs        EmailLog[]
}

model Condition {
  id          String   @id @default(uuid())
  field       String   // from, to, subject, body
  operator    String   // contains, equals, startsWith, endsWith, matches
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ruleId      String
  rule        Rule     @relation(fields: [ruleId], references: [id], onDelete: Cascade)
}

model Action {
  id          String   @id @default(uuid())
  type        String   // reply, forward, archive, label
  template    String?  // Template para resposta
  to          String?  // Email para encaminhamento
  label       String?  // Label para aplicar
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ruleId      String
  rule        Rule     @relation(fields: [ruleId], references: [id], onDelete: Cascade)
}

model EmailLog {
  id          String   @id @default(uuid())
  messageId   String   @unique
  from        String
  to          String
  subject     String
  body        String
  status      String   // processed, pending, error
  error       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ruleId      String?
  rule        Rule?    @relation(fields: [ruleId], references: [id])
}
